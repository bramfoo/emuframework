<?xml version="1.0"?>
<!--
$Revision$ $Date$ $Author$
-->

<!--
$header:
* Copyright (c) 2009-2011 Tessella plc.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* For more information about this project, visit
*   http://www.keep-project.eu/
*   http://emuframework.sourceforge.net/
* or contact us via email:
*   blohman at users.sourceforge.net
*   dav_m at users.sourceforge.net
*   bkiers at users.sourceforge.net
* Developed by:
*   Tessella plc <www.tessella.com>
*   Koninklijke Bibliotheek <www.kb.nl>
*   KEEP <www.keep-project.eu>
* Project Title: Software Archive (SWA)
$
-->

<project name="Software Archive Prototype" default="jar" basedir=".">

	<property file="user.properties"/>

    <property name="server.script" value="runServer"/>
    <property name="server.name" value="softwareArchiveServer"/>
    <property name="server.version" value="0.2.0"/>
    
    <property environment="env"/>
    <property name="home.dir" location="${basedir}"/>
    <property name="lib.dir" location ="${basedir}/lib"/>
    <property name="jar.dir" location ="${basedir}"/>   
    <property name="build.dir" location ="${basedir}/build"/>
    <property name="classes.dir" location ="${build.dir}/classes"/>
    <property name="release.dir" location ="${build.dir}/release"/>
    <property name="src.dir" location ="${basedir}/src/main"/>
	<property name="gen-src.dir"	 location="${basedir}/src/generated"/>	
	<property name="test.dir" location ="${basedir}/src/test"/>
    <property name="test.report.dir" value="${build.dir}/test"/>
	<property name="database.dir"  location="${basedir}/database"/>
	<property name="sqlscript.dir"  location="${database.dir}/sql"/>	
	    
	<!-- check if user.properties file exists or not -->
	<target name="check.user.properties">
	    <available file="user.properties" property="user.properties.present"/>
	    <fail message="user.properties file is missing !" unless="user.properties.present"/>
	</target>
	
    <!-- find java version and tools.jar -->
    <available property="tools.jar" value="$${env.JAVA_HOME}/lib/tools.jar"
               file="${env.JAVA_HOME}/lib/tools.jar"/>
    <path id="jdk.tools.classpath">
        <pathelement location="${tools.jar}"/>
    </path>

    <condition property="is.java.version.15">
        <or>
          <equals arg1="${ant.java.version}" arg2="1.5"/>
          <equals arg1="${ant.java.version}" arg2="1.6"/>
          <equals arg1="${ant.java.version}" arg2="1.7"/>
        </or>
    </condition>

    <fail message="${server.name} requires Java version 1.5 or higher. You are currently using Java version ${ant.java.version}."
          unless="is.java.version.15"/>

    <!-- classpath -->
    <path id="dev.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <manifestclasspath property="manifest.classpath" jarfile="./${server.name}-${server.version}.jar">
	   <classpath refid="dev.classpath" />
	</manifestclasspath>

    <!-- clean -->
    <target name="clean">
        <delete dir="${build.dir}"/>
    	<delete dir="${gen-src.dir}"/>
        <delete file="${server.script}.sh"/> 
        <delete file="${server.script}.bat"/>         
        <delete file="${jar.dir}/${server.name}-${server.version}.jar"/>
    </target>

	<!-- Generate automatic source -->
    <target name="generated.src" description="Generates the CXF classes" depends="check.user.properties" if="user.properties.present">
    	<delete dir="${gen-src.dir}"/>
    	<echo level="info" message="Generating Java classes using Apache CXF wsdl2java..."/>
        <java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true">
          <arg value="-d"/>
          <arg value="${gen-src.dir}"/>
          <arg value="-xjc-Xts"/>
          <arg value="./resources/softwarearchive.wsdl"/>
          <classpath>
            <path refid="dev.classpath"/>
          </classpath>
        </java>
    </target>

	<!-- compile -->
    <target name="compile" description="Compile the java classes" depends="clean, generated.src">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${gen-src.dir}" destdir="${classes.dir}" debug="true">
            <classpath refid="dev.classpath" />
        </javac>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
            <classpath refid="dev.classpath" />
        </javac>
    </target>

    <!-- jar -->
    <target name="jar" description="Create a jar file" depends="compile">
        <manifestclasspath property="server.manifest.classpath" jarfile="./${server.name}-${server.version}.jar">
	       <classpath refid="dev.classpath" />
	    </manifestclasspath>
		<mkdir dir="${jar.dir}"/>
		<tstamp/>
        <jar destfile="${jar.dir}/${server.name}-${server.version}.jar" basedir="${classes.dir}" excludes="">
			<manifest>
				<attribute name="Manifest-Version"      value="1.0"/>
			    <attribute name="Specification-Title"   value="Software Archive"/>
			    <attribute name="Specification-Version" value="${server.version}"/>
			    <attribute name="Specification-Vendor"  value="KEEP project - http://www.keep-project.eu"/>
			    <attribute name="Built-By"              value="Tessella plc - http://www.tessella.com"/>
			    <attribute name="Built-Date"            value="${TODAY}"/>		
				<attribute name="Main-Class"            value="eu.keep.softwarearchive.SoftwareArchive"/>
				<attribute name="Class-Path"            value=". ${manifest.classpath}"/>
			</manifest>
		</jar>
    </target>

    <!-- release -->
    <target name="release" description="Create a release package" depends="jar, db.drop, db.create, db.populate, runServer.scripts" >	   	    
	    <property name="release.name"  value="swa-${server.version}.zip"/>
        <mkdir dir="${release.dir}"/>
        <zip destfile="${release.dir}/${release.name}" basedir="${basedir}" includes="${server.script}.*, *.jar, lib/*.jar, database/db/**, user.properties, logging.properties" excludes="lib/junit-4.7.jar">
        </zip>
        <echo message="Release ${release.name} has been created in ${release.dir}" />  
    </target>

    <!-- Generate runServer scripts for Linux (.sh) and Windows (.bat) -->
	<target name="runServer.scripts">
		<echo message="Creating Linux/Windows startup scripts" />
        <echo file="${server.script}.sh" append="false" message='#!/bin/bash${line.separator}java -Xmx256M -Djava.util.logging.config.file=logging.properties -jar ${server.name}-${server.version}.jar'/>
        <echo file="${server.script}.bat" append="false" message='@echo off${line.separator}REM Windows bat script${line.separator}java -Xmx256M -Djava.util.logging.config.file=logging.properties -jar ${server.name}-${server.version}.jar'/>        
    </target>

    <!-- unit test -->
	<target name="test.compile" depends="compile">
		<mkdir dir="${classes.dir}"/>
        <javac srcdir="${test.dir}" destdir="${classes.dir}" classpathref="dev.classpath" fork="yes"/>
    </target>

    <target name="test.run" description="Run the unit tests" depends="test.compile, testProperties.toTestDir">
        <mkdir dir="${test.report.dir}"/>
        <junit printsummary="yes" haltonfailure="no" showoutput="yes" >
            <batchtest fork="yes" todir="${test.report.dir}" >
                <fileset dir="${classes.dir}">
                  <include name="**/Test*.class" />
                </fileset>
            </batchtest>
            <formatter type="xml" />
            <classpath>
                <path refid="dev.classpath"/>
                <path location="${classes.dir}"/>
            </classpath>
        </junit>
    </target>

    <target name="test.report" description="Generating the unit tests report" depends="test.run">
        <mkdir dir="${test.report.dir}/html/" />
        <junitreport todir="${test.report.dir}">
		      <fileset dir="${test.report.dir}">
		        <include name="TEST-*.xml"/>
		      </fileset>
		      <report format="frames" todir="${test.report.dir}/html/"/>
        </junitreport>
       	<echo message="View the unit test report in your browser: file://${test.report.dir}/html/index.html"/>
    </target>

    <!-- database -->    
	<target name="db.create" description="Creates the database users/schemas/tables" depends="check.user.properties" if="user.properties.present">
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}"
			     user="${h2.db.admin}"
				 password="${h2.db.adminpassw}"
				 script="${sqlscript.dir}/SWA_CreateUser.sql"
				 failonerror="false">
		</H2RunScript>
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}"
			     user="${h2.db.admin}"
				 password="${h2.db.adminpassw}"
				 script="${sqlscript.dir}/SWA_CreateSchema.sql"
				 failonerror="true">
		</H2RunScript>
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}${h2.db.schema}"
			     user="${h2.db.user}"
				 password="${h2.db.userpassw}"
				 script="${sqlscript.dir}/SWA_CreateTables.sql"
				 failonerror="true">
		</H2RunScript>
	</target>
	
	<target name="db.populate" description="Populates the database" depends="check.user.properties" if="user.properties.present">
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}"
			     user="${h2.db.user}"
				 password="${h2.db.userpassw}"
				 script="${sqlscript.dir}/SWA_PopulateTables.sql"
				 failonerror="true">
		</H2RunScript>
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}"
			     user="${h2.db.user}"
				 password="${h2.db.userpassw}"
				 script="${sqlscript.dir}/SWA_PopulateTablesFree.sql"
				 failonerror="true">
		</H2RunScript>
	</target>	
	
	<target name="db.drop" description="Drops the database users/schemas/tables" depends="check.user.properties" if="user.properties.present">
		<H2RunScript url="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}"
			     user="${h2.db.admin}"
				 password="${h2.db.adminpassw}"
				 script="${sqlscript.dir}/SWA_DropUserSchema.sql"
				 failonerror="true">
		</H2RunScript>
        <delete dir="${h2.db.url}.lobs.db"/>
	</target>   
    
    <!-- H2 RunScript: executes H2's RunScript tool with parameters -->
	<macrodef name="H2RunScript">
		<attribute name="url" default="${h2.jdbc.prefix}${h2.db.url}${h2.db.exists}${h2.db.softwarearchiveschema}"/>
		<attribute name="user"/>
		<attribute name="password"/> 
		<attribute name="script"/>
		<attribute name="failonerror" default="true"/>
	
		<element name="arguments" optional="true"/>
		
		<sequential>
			<!-- executes "RunScript -url [url] -user [user] -password [password] -script [script] -->
			<echo level="info" 
			message="executing: org.h2.tools.RunScript -url @{url} -user @{user} -password @{password} -script @{script}"/>
	        <java fork="true" classname="org.h2.tools.RunScript">
	            <classpath>
	                <path refid="dev.classpath"/>
	            </classpath>
	        	<arg line='-url "@{url}"'/>
	        	<arg line="-user @{user}"/>
	        	<arg line="-password @{password}"/>
	        	<arg line='-script "@{script}"'/>
	        	<arguments/>
	        </java>
		</sequential>
	</macrodef>

    <!-- Copy test.properties onto classpath -->
    <target name="testProperties.toTestDir">
        <copy file="${basedir}/test.properties" todir="${classes.dir}/eu/keep" overwrite="yes"/>
    </target>
</project>
