/*
* $Revision: 601 $ $Date: 2011-05-31 00:13:40 +0100 (Tue, 31 May 2011) $
* $Author: BLohman $
* $header:
* Copyright (c) 2009-2011 Tessella plc.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* For more information about this project, visit
*   http://www.keep-project.eu/
*   http://emuframework.sourceforge.net/
* or contact us via email:
*   blohman at users.sourceforge.net
*   dav_m at users.sourceforge.net
*   bkiers at users.sourceforge.net
* Developed by:
*   Tessella plc <www.tessella.com>
*   Koninklijke Bibliotheek <www.kb.nl>
*   KEEP <www.keep-project.eu>
* Project Title: Emulator Archive (EA)$
*/

package eu.keep.emulatorarchive;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Logger;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import javax.xml.ws.Endpoint;

/**
 * Emulator Archive main class
 * Starts the emulator archive: connects to the database, publishes the endpoints
 * Replaces "EmulatorArchivePortType_EmulatorArchivePort_Server", a Java class
 * generated by Apache CXF wsdl2java (when given '-server' flag). Some functionality from
 * that class has been copied here.
 * 
 * @author David Michel
 * @author Bram Lohman
 */
public class EmulatorArchive {

    private static final Logger LOGGER = Logger.getLogger(EmulatorArchive.class.getName());    
    private final static String propertiesFile = "user.properties";
    private static Properties props;

    private EmulatorPackageDAO  emulatorPackageDAO;
    private Connection          emulatorDatabaseConnection;

    /**
     * Constructor
     * @param props The properties file
     * @throws IOException
     */
    public EmulatorArchive(Properties props) throws IOException {
        
        // set up connection to databases
        int connectionAttempts = 5;

        Map<String, String> pv = new HashMap<String, String>();
        pv.put("driver",    props.getProperty("h2.db.driver"));
        pv.put("urlPref",   props.getProperty("h2.jdbc.prefix"));
        pv.put("url",       props.getProperty("h2.db.url"));
        pv.put("urlExist",  props.getProperty("h2.db.exists"));
        pv.put("urlSchema", props.getProperty("h2.db.schema"));
        pv.put("user",      props.getProperty("h2.db.user"));
        pv.put("pw",        props.getProperty("h2.db.userpassw"));
        
        for (String propVal : pv.keySet())
        {
        	if (pv.get(propVal) == null)
        		throw new IOException("Property '" + propVal + "' does not exist in file " + propertiesFile);
        }
        
        // Set connection to database
        emulatorDatabaseConnection = establishConnection(pv.get("driver"), pv.get("urlPref") + pv.get("url") + pv.get("urlExist") + pv.get("urlSchema"), pv.get("user"),
        		pv.get("pw"), connectionAttempts);

        System.out.println("Setting up web services port...");
        emulatorPackageDAO = new H2EmulatorPackageDAO(emulatorDatabaseConnection);
        Object implementor = new EmulatorArchivePortTypeImpl(emulatorPackageDAO);
        String address = props.getProperty("server.soap.address");
        Endpoint.publish(address, implementor);
    }

    /**
     * Start the emulator archive (runs indefinitely)
     * @param args
     * @throws Exception
     */
    public static void main(String args[]) throws Exception {

        EmulatorArchive ea = null;

        System.out.println("Starting server...");

        try {

            // Read the properties file
            props = getProperties(propertiesFile);
            ea = new EmulatorArchive(props);
            System.out.println("Server ready...");

            // Infinite loop
            while (true){
                Thread.sleep(5 * 60 * 1000);
            }
        }
        catch (IOException e) {
            LOGGER.severe("Error occurred while setting up emulator archive: " + e.toString());
            throw new RuntimeException("Error occurred while setting up emulator archive: " + e.toString());
        } finally {
            if(ea != null) {
                ea.closeConnection();
            }
        }
    }

    /**
     * Loads the user.properties file
     * @param userPropertiesFileName Filename of the properties file
     * @return Properties object
     * @throws IOException
     */
    private static Properties getProperties(String userPropertiesFileName) throws IOException {

        // Read the properties file
        Properties props = new Properties();
        FileInputStream fis = null;

        try {
            fis = new FileInputStream(userPropertiesFileName);
            props.load(fis);
        }
        catch (FileNotFoundException e) {
            LOGGER.severe("Failed to read properties file [" + userPropertiesFileName + "]: "
                    + e.toString());
            throw new IOException("Failed to read properties file [" + userPropertiesFileName + "]: "
                    + e.toString());
        }
        catch (IOException e) {
            LOGGER.severe("Failed to read properties file [" + userPropertiesFileName + "]: "
                    + e.toString());
            throw new IOException("Failed to read properties file [" + userPropertiesFileName + "]: "
                    + e.toString());
        }

        finally {
            try {

                if (fis != null) {
                    fis.close();
                }
            }
            catch (Exception e) {
                // Hmm... hoping not to get this far into catching exceptions;
                // we'll just log it and proceed...
                LOGGER.info("Failed to close open file: [" + userPropertiesFileName + "]: "
                        + e.toString());
            }
        }

        LOGGER.info("Correctly read properties file: " + userPropertiesFileName);
        return props;
    }
	
    /**
     * Establish a connection to a database
     * @param driver Database driver to be used
     * @param dbUrl Database URL
     * @param dbUser Username
     * @param dbPasswd Password
     * @param nAttempt Number of attempted connections before quitting
     * @return A connection to the database 
     * @throws IOException If connecting to the database fails
     */
    private Connection establishConnection(String driver, String dbUrl, String dbUser,
            String dbPasswd, int nAttempt) throws IOException {

        Connection conn = null;
    	
    	System.out.println("Setting up connection to archive database...");

        // Set up the db connection
        // Register the JDBC driver
        try {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e) {
             LOGGER.severe("Database driver not found: " + driver);
            throw new IOException("Database driver not found: " + e);
        }

        int iAttempt = 0;
        while (iAttempt < nAttempt) {
            try {
                conn = DriverManager.getConnection(dbUrl, dbUser, dbPasswd);
                break;
            }
            catch (SQLException e) {
                LOGGER.info("Attempt "+ iAttempt + " of " + nAttempt + " to connect to database...");
            }
            iAttempt++;
        }

        if (iAttempt >= nAttempt) {
             LOGGER.severe("Failed to connect to database: " + dbUrl);
            throw new IOException("Failed to connect to database: " + dbUrl);
        }

        return conn;
    }

    /**
     * Closes the connection to the database
     * @throws IOException
     */
    public void closeConnection() throws IOException {
        try {
            emulatorDatabaseConnection.close();
        }
        catch (SQLException e) {
            LOGGER.severe("Failed to close connection to database");
            throw new IOException("Failed to close connection to database: " + e.toString());
        }
    }

}
